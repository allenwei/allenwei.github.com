<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS Dev | Digruby]]></title>
  <link href="http://allenwei.github.io/blog/categories/ios-dev/atom.xml" rel="self"/>
  <link href="http://allenwei.github.io/"/>
  <updated>2013-11-03T21:42:50+08:00</updated>
  <id>http://allenwei.github.io/</id>
  <author>
    <name><![CDATA[Allen Wei]]></name>
    <email><![CDATA[digruby@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS - Right way to handle keyboard appear/disappear in iOS 5]]></title>
    <link href="http://allenwei.github.io/blog/2012/05/10/ios-right-way-to-handle-keyboard-appeardisappear-in-ios-5/"/>
    <updated>2012-05-10T00:00:00+08:00</updated>
    <id>http://allenwei.github.io/blog/2012/05/10/ios-right-way-to-handle-keyboard-appeardisappear-in-ios-5</id>
    <content type="html"><![CDATA[<p>Because after iOS 5, keyboard will have dynamic height,event more split and doc feature will position keyboard in directly location, so the good way to handle keyboard is:</p>

<p><code>
@interface KeyboardScrollView : UIScrollView
@end
</code></p>

<p>``` c</p>

<h1>import &ldquo;KeyboardScrollView.h&rdquo;</h1>

<p>@implementation KeyboardScrollView</p>

<p>&ndash;(void)drawRect:(CGRect)rect {</p>

<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self
                                         selector:@selector(keyboardFrameChanged:)
                                             name:UIKeyboardDidChangeFrameNotification object:nil];

[super drawRect:rect];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)keyboardFrameChanged:(NSNotification*)aNotification
{</p>

<p>  NSDictionary* info = [aNotification userInfo];
  CGPoint from = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].origin;
  CGPoint to = [[info objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].origin;</p>

<p>  float height = 0.0f;
  if (UIInterfaceOrientationIsLandscape([UIApplication sharedApplication].statusBarOrientation)) {
      height = to.x &ndash; from.x;
  } else {
      height = to.y &ndash; from.y;
  }</p>

<p>  [self setContentSize:CGSizeMake(self.frame.size.width, self.frame.size.height + height)];
}</p></li>
<li><p>(void)touchesBegan:(NSSet <em>)touches withEvent:(UIEvent </em>)event {
  for (UITouch *touch in touches){
      if (touch.view == self){
          [self findAndResignFirstResponder];
      }
  }
  [super touchesBegan:touches withEvent:event];
}</p></li>
</ul>


<p>&ndash;(void)findAndResignFirstResponder{</p>

<pre><code>for (UIView *aView in [self subviews]){
    if ([aView isFirstResponder] ) {
        [aView resignFirstResponder];
    }
}
</code></pre>

<p>}</p>

<p>&ndash;(void)dealloc {</p>

<pre><code>[[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidChangeFrameNotification object:nil];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS - Modern Logger Solution for iOS NSLogger]]></title>
    <link href="http://allenwei.github.io/blog/2012/04/13/ios-modern-logger-solution-for-ios-nslogger/"/>
    <updated>2012-04-13T00:00:00+08:00</updated>
    <id>http://allenwei.github.io/blog/2012/04/13/ios-modern-logger-solution-for-ios-nslogger</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/fpillet/NSLogger">NSLogger</a>  is a replacement of NSLog which provide an GUI app to see and filter your log. you can log text, binary even image.</p>

<p><a href="https://github.com/fpillet/NSLogger/raw/master/Screenshots/mainwindow.png" target="_blank"><image src="https://github.com/fpillet/NSLogger/raw/master/Screenshots/mainwindow.png" width="500px"></a></p>


<p>But there is no log level control.
You can use <a href="https://github.com/aharren/LibComponentLogging-NSLogger">LibComponentLogging-NSLog</a> LibComponentLogging extension</p>

<p>or use your custom level control macro:</p>

<p>``` c</p>

<h1>import &ldquo;LoggerClient.h&rdquo;</h1>

<h1>define BPLOGLEVEL_DEBUG    0</h1>

<h1>define BPLOGLEVEL_INFO     1</h1>

<h1>define BPLOGLEVEL_WARNING  2</h1>

<h1>define BPLOGLEVEL_ERROR    3</h1>

<h1>ifndef BPLOGLEVEL</h1>

<h1>define BPLOGLEVEL BPLOGLEVEL_DEBUG</h1>

<h1>endif</h1>

<p>// you can refined tag in your file, using following code
//
// #undef BPLogTag
// #define BPLogTag @&ldquo;OrderMessageReceiver&rdquo;</p>

<h1>define BPLogTag @&ldquo;App&rdquo;</h1>

<h1>ifdef DEBUG</h1>

<pre><code>#define BPLog(level, tag, ...) \
    if (level &gt;= BPLOGLEVEL) { \
        LogMessageF(__FILE__,__LINE__,__FUNCTION__, tag, level,__VA_ARGS__); \
    } 
</code></pre>

<h1>else</h1>

<pre><code>#define BPLog(level, tag, ...)  ((void)0)
</code></pre>

<h1>endif // #ifdef DEBUG</h1>

<h1>define BPLogError(&hellip;) BPLog(BPLOGLEVEL_ERROR, BPLogTag, <strong>VA_ARGS</strong>)</h1>

<h1>define BPLogWarning(&hellip;) BPLog(BPLOGLEVEL_WARNING, BPLogTag, <strong>VA_ARGS</strong>)</h1>

<h1>define BPLogInfo(&hellip;) BPLog(BPLOGLEVEL_INFO, BPLogTag, <strong>VA_ARGS</strong>)</h1>

<h1>define BPLogDebug(&hellip;) BPLog(BPLOGLEVEL_DEBUG, BPLogTag, <strong>VA_ARGS</strong>)</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS - Be careful NSArray indexOfObject method]]></title>
    <link href="http://allenwei.github.io/blog/2012/03/22/be-careful-nsarray-indexofobject-method/"/>
    <updated>2012-03-22T00:00:00+08:00</updated>
    <id>http://allenwei.github.io/blog/2012/03/22/be-careful-nsarray-indexofobject-method</id>
    <content type="html"><![CDATA[<p>if you want to determine if an object in an array, please be careful.
see following code:</p>

<p>```
NSArray *array = [NSArray array];
NSInteger index = [array indexOfObject: @&ldquo;not exist&rdquo;]
if (index >= 0) {</p>

<pre><code>//always be true
</code></pre>

<p>}
// you must use
if (index != NSNotFound) {</p>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Code Sense and Syntax Highlighting for Xcode]]></title>
    <link href="http://allenwei.github.io/blog/2012/03/21/fix-code-sense-and-syntax-highlighting-for-xcode/"/>
    <updated>2012-03-21T00:00:00+08:00</updated>
    <id>http://allenwei.github.io/blog/2012/03/21/fix-code-sense-and-syntax-highlighting-for-xcode</id>
    <content type="html"><![CDATA[<p>Sometimes syntax highlighting does not work on Xcode 4.</p>

<p>We can do it with following steps:</p>

<h1>Go to Organizer project panel</h1>

<h1>Choose your project</h1>

<h1>Click &ldquo;Delete&rdquo; button after the Derived Data on the right panel.</h1>

<p>Xcode will start to rebuild code sense of your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS - Determine  Whether Current View is a Modal ]]></title>
    <link href="http://allenwei.github.io/blog/2012/03/13/ios-determine-current-view-is-a-modal/"/>
    <updated>2012-03-13T00:00:00+08:00</updated>
    <id>http://allenwei.github.io/blog/2012/03/13/ios-determine-current-view-is-a-modal</id>
    <content type="html"><![CDATA[<p>@UIViewController+ModalAdditions.h@</p>

<p><code>c
@interface UIViewController (ModalAdditions)
-(BOOL)isModal;
@end
</code></p>

<p>@UIViewController+ModalAdditions.m@</p>

<p>``` c</p>

<h1>import &ldquo;UIViewController+ModalAdditions.h&rdquo;</h1>

<p>@implementation UIViewController (ModalAdditions)
&ndash;(BOOL)isModal {</p>

<pre><code>BOOL isModal = ((self.parentViewController &amp;&amp; self.parentViewController.modalViewController == self) || 
                //or if I have a navigation controller, check if its parent modal view controller is self navigation controller
                ( self.navigationController &amp;&amp; self.navigationController.parentViewController &amp;&amp; self.navigationController.parentViewController.modalViewController == self.navigationController) || 
                //or if the parent of my UITabBarController is also a UITabBarController class, then there is no way to do that, except by using a modal presentation
                [[[self tabBarController] parentViewController] isKindOfClass:[UITabBarController class]]);

//iOS 5+
if (!isModal &amp;&amp; [self respondsToSelector:@selector(presentingViewController)]) {

    isModal = ((self.presentingViewController &amp;&amp; self.presentingViewController.modalViewController == self) || 
               //or if I have a navigation controller, check if its parent modal view controller is self navigation controller
               (self.navigationController &amp;&amp; self.navigationController.presentingViewController &amp;&amp; self.navigationController.presentingViewController.modalViewController == self.navigationController) || 
               //or if the parent of my UITabBarController is also a UITabBarController class, then there is no way to do that, except by using a modal presentation
               [[[self tabBarController] presentingViewController] isKindOfClass:[UITabBarController class]]);

}

return isModal;        
</code></pre>

<p>}
@end
```</p>
]]></content>
  </entry>
  
</feed>
